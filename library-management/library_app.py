import streamlit as st
import pandas as pd
from datetime import datetime, timedelta
import time

# C·∫•u h√¨nh trang
st.set_page_config(
    page_title="Th∆∞ vi·ªán Online",
    page_icon="üìö",
    layout="wide"
)

# D·ªØ li·ªáu s√°ch m·∫´u
if 'books_data' not in st.session_state:
    st.session_state.books_data = {
        'B001': {
            'title': 'T√¥i Th·∫•y Hoa V√†ng Tr√™n C·ªè Xanh',
            'author': 'Nguy·ªÖn Nh·∫≠t √Ånh',
            'category': 'VƒÉn h·ªçc',
            'isbn': '978-604-2-03456-7',
            'publisher': 'NXB Tr·∫ª',
            'year': 2010,
            'copies_total': 5,
            'copies_available': 5,
            'description': 'Cu·ªën ti·ªÉu thuy·∫øt n·ªïi ti·∫øng v·ªÅ tu·ªïi th∆° mi·ªÅn qu√™ Vi·ªát Nam'
        },
        'B002': {
            'title': 'C√¢y Cam Ng·ªçt C·ªßa T√¥i',
            'author': 'Jos√© Mauro de Vasconcelos',
            'category': 'VƒÉn h·ªçc n∆∞·ªõc ngo√†i',
            'isbn': '978-604-2-12345-8',
            'publisher': 'NXB H·ªôi Nh√† VƒÉn',
            'year': 2020,
            'copies_total': 3,
            'copies_available': 3,
            'description': 'C√¢u chuy·ªán c·∫£m ƒë·ªông v·ªÅ tu·ªïi th∆° c·ªßa c·∫≠u b√© Brazil',
        },
        'B003': {
            'title': 'ƒê·∫Øc Nh√¢n T√¢m',
            'author': 'Dale Carnegie',
            'category': 'K·ªπ nƒÉng s·ªëng',
            'isbn': '978-604-2-98765-4',
            'publisher': 'NXB T·ªïng H·ª£p TPHCM',
            'year': 2018,
            'copies_total': 8,
            'copies_available': 8,
            'description': 'S√°ch kinh ƒëi·ªÉn v·ªÅ ph√°t tri·ªÉn c√° nh√¢n trong giao ti·∫øp ƒë·ªÉ th√†nh c√¥ng',
        },
        'B004': {
            'title': 'Sapiens: L∆∞·ª£c S·ª≠ Lo√†i Ng∆∞·ªùi',
            'author': 'Yuval Noah Harari',
            'category': 'Khoa h·ªçc',
            'isbn': '978-604-2-55555-5',
            'publisher': 'NXB Th·∫ø Gi·ªõi',
            'year': 2019,
            'copies_total': 4,
            'copies_available': 4,
            'description': 'Cu·ªën s√°ch kh√°m ph√° l·ªãch s·ª≠ ti·∫øn h√≥a c·ªßa lo√†i ng∆∞·ªùi'
        },
        'B005': {
            'title': 'Nh√† Gi·∫£ Kim',
            'author': 'Paulo Coelho',
            'category': 'VƒÉn h·ªçc n∆∞·ªõc ngo√†i',
            'isbn': '978-604-2-11111-1',
            'publisher': 'NXB VƒÉn H·ªçc',
            'year': 2017,
            'copies_total': 6,
            'copies_available': 6,
            'description': 'C√¢u chuy·ªán v·ªÅ h√†nh tr√¨nh t√¨m ki·∫øm kho b√°u c·ªßa ch√†ng chƒÉn c·ª´u'
        }
    }

# D·ªØ li·ªáu ng∆∞·ªùi d√πng m·∫´u
if 'users_data' not in st.session_state:
    st.session_state.users_data = {
        'user001': {
            'name': 'Nguy·ªÖn VƒÉn An',
            'email': 'anvn@email.com',
            'phone': '0123456789',
            'address': 'Qu·∫≠n 1, TP.HCM',
            'member_since': '2023-01-15'
        },
        'user002': {
            'name': 'Tr·∫ßn Th·ªã B√¨nh',
            'email': 'binhtt@email.com',
            'phone': '0987654321',
            'address': 'Qu·∫≠n 3, TP.HCM',
            'member_since': '2023-03-20'
        }
    }

# D·ªØ li·ªáu m∆∞·ª£n s√°ch
if 'borrowing_data' not in st.session_state:
    st.session_state.borrowing_data = []

# Kh·ªüi t·∫°o session state cho ƒëƒÉng nh·∫≠p
if 'logged_in' not in st.session_state:
    st.session_state.logged_in = False
if 'current_user' not in st.session_state:
    st.session_state.current_user = None

def login_form():
    st.title("üîê ƒêƒÉng nh·∫≠p Th∆∞ vi·ªán")
    
    with st.form("login_form"):
        user_id = st.selectbox(
            "Ch·ªçn t√†i kho·∫£n:",
            options=list(st.session_state.users_data.keys()),
            format_func=lambda x: f"{x} - {st.session_state.users_data[x]['name']}"
        )
        
        submitted = st.form_submit_button("ƒêƒÉng nh·∫≠p")
        
        if submitted:
            st.session_state.logged_in = True
            st.session_state.current_user = user_id
            st.rerun()

def display_book_card(book_id, book_info, context=""):
    with st.container():
        col1, col2 = st.columns([1, 3])
        
        with col1:
            st.image(book_info['image_url'], width=120)
        
        with col2:
            st.subheader(book_info['title'])
            st.write(f"**T√°c gi·∫£:** {book_info['author']}")
            st.write(f"**Th·ªÉ lo·∫°i:** {book_info['category']}")
            st.write(f"**NXB:** {book_info['publisher']} ({book_info['year']})")
            st.write(f"**ISBN:** {book_info['isbn']}")
            
            # Tr·∫°ng th√°i s√°ch
            if book_info['copies_available'] > 0:
                st.success(f"C√≤n {book_info['copies_available']}/{book_info['copies_total']} cu·ªën")
                if st.button(f"M∆∞·ª£n s√°ch", key=f"borrow_{book_id}_{context}"):
                    borrow_book(book_id)
            else:
                st.error("H·∫øt s√°ch")
            
            with st.expander("Chi ti·∫øt"):
                st.write(book_info['description'])

def borrow_book(book_id):
    if st.session_state.books_data[book_id]['copies_available'] > 0:
        # Gi·∫£m s·ªë s√°ch c√≥ s·∫µn
        st.session_state.books_data[book_id]['copies_available'] -= 1
        
        # Th√™m v√†o danh s√°ch m∆∞·ª£n
        borrow_record = {
            'user_id': st.session_state.current_user,
            'book_id': book_id,
            'borrow_date': datetime.now().strftime("%Y-%m-%d"),
            'return_date': (datetime.now() + timedelta(days=14)).strftime("%Y-%m-%d"),
            'status': 'ƒêang m∆∞·ª£n'
        }
        st.session_state.borrowing_data.append(borrow_record)
        
        st.success(f"M∆∞·ª£n s√°ch th√†nh c√¥ng! H·∫°n tr·∫£: {borrow_record['return_date']}")
        time.sleep(1)
        st.rerun()

def return_book(book_id):
    # TƒÉng s·ªë s√°ch c√≥ s·∫µn
    st.session_state.books_data[book_id]['copies_available'] += 1
    
    # C·∫≠p nh·∫≠t tr·∫°ng th√°i trong danh s√°ch m∆∞·ª£n
    for record in st.session_state.borrowing_data:
        if (record['user_id'] == st.session_state.current_user and 
            record['book_id'] == book_id and 
            record['status'] == 'ƒêang m∆∞·ª£n'):
            record['status'] = 'ƒê√£ tr·∫£'
            record['actual_return_date'] = datetime.now().strftime("%Y-%m-%d")
            break
    
    st.success("Tr·∫£ s√°ch th√†nh c√¥ng!")
    time.sleep(1)
    st.rerun()

def main_app():
    # Header
    st.title("üìö Th∆∞ vi·ªán Online")
    
    # Th√¥ng tin ng∆∞·ªùi d√πng
    user_info = st.session_state.users_data[st.session_state.current_user]
    st.sidebar.write(f"**Xin ch√†o:** {user_info['name']}")
    st.sidebar.write(f"**Email:** {user_info['email']}")
    
    if st.sidebar.button("ƒêƒÉng xu·∫•t"):
        st.session_state.logged_in = False
        st.session_state.current_user = None
        st.rerun()
    
    # Menu ch√≠nh
    tab1, tab2, tab3, tab4 = st.tabs(["üìñ Danh s√°ch s√°ch", "üîç T√¨m ki·∫øm", "üìã S√°ch ƒë√£ m∆∞·ª£n", "üìä Th·ªëng k√™"])
    
    with tab1:
        st.header("Danh s√°ch t·∫•t c·∫£ s√°ch")
        
        # L·ªçc theo th·ªÉ lo·∫°i
        categories = list(set([book['category'] for book in st.session_state.books_data.values()]))
        selected_category = st.selectbox("L·ªçc theo th·ªÉ lo·∫°i:", ["T·∫•t c·∫£"] + categories)
        
        # Hi·ªÉn th·ªã s√°ch
        for book_id, book_info in st.session_state.books_data.items():
            if selected_category == "T·∫•t c·∫£" or book_info['category'] == selected_category:
                display_book_card(book_id, book_info, "list")
                st.divider()
    
    with tab2:
        st.header("T√¨m ki·∫øm s√°ch")
        
        search_query = st.text_input("Nh·∫≠p t√™n s√°ch, t√°c gi·∫£ ho·∫∑c t·ª´ kh√≥a:")
        
        if search_query:
            found_books = []
            for book_id, book_info in st.session_state.books_data.items():
                if (search_query.lower() in book_info['title'].lower() or 
                    search_query.lower() in book_info['author'].lower() or
                    search_query.lower() in book_info['description'].lower()):
                    found_books.append((book_id, book_info))
            
            if found_books:
                st.write(f"T√¨m th·∫•y {len(found_books)} k·∫øt qu·∫£:")
                for i, (book_id, book_info) in enumerate(found_books):
                    display_book_card(book_id, book_info, f"search_{i}")
                    st.divider()
            else:
                st.warning("Kh√¥ng t√¨m th·∫•y s√°ch n√†o ph√π h·ª£p.")
    
    with tab3:
        st.header("S√°ch ƒë√£ m∆∞·ª£n")
        
        user_borrowed_books = [
            record for record in st.session_state.borrowing_data 
            if record['user_id'] == st.session_state.current_user
        ]
        
        if user_borrowed_books:
            for i, record in enumerate(user_borrowed_books):
                book_info = st.session_state.books_data[record['book_id']]
                
                col1, col2, col3, col4 = st.columns([3, 2, 2, 1])
                
                with col1:
                    st.write(f"**{book_info['title']}**")
                    st.write(f"T√°c gi·∫£: {book_info['author']}")
                
                with col2:
                    st.write(f"Ng√†y m∆∞·ª£n: {record['borrow_date']}")
                    st.write(f"H·∫°n tr·∫£: {record['return_date']}")
                
                with col3:
                    if record['status'] == 'ƒêang m∆∞·ª£n':
                        # Ki·ªÉm tra qu√° h·∫°n
                        return_date = datetime.strptime(record['return_date'], "%Y-%m-%d")
                        if datetime.now() > return_date:
                            st.error("Qu√° h·∫°n")
                        else:
                            st.info("ƒêang m∆∞·ª£n")
                    else:
                        st.success("ƒê√£ tr·∫£")
                
                with col4:
                    if record['status'] == 'ƒêang m∆∞·ª£n':
                        if st.button("Tr·∫£ s√°ch", key=f"return_{record['book_id']}_{record['borrow_date']}_{i}"):
                            return_book(record['book_id'])
                
                st.divider()
        else:
            st.info("B·∫°n ch∆∞a m∆∞·ª£n s√°ch n√†o.")
    
    with tab4:
        st.header("Th·ªëng k√™ th∆∞ vi·ªán")
        
        # Th·ªëng k√™ t·ªïng quan
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            total_books = sum([book['copies_total'] for book in st.session_state.books_data.values()])
            st.metric("T·ªïng s·ªë s√°ch", total_books)
        
        with col2:
            available_books = sum([book['copies_available'] for book in st.session_state.books_data.values()])
            st.metric("S√°ch c√≥ s·∫µn", available_books)
        
        with col3:
            borrowed_books = total_books - available_books
            st.metric("S√°ch ƒëang cho m∆∞·ª£n", borrowed_books)
        
        with col4:
            total_users = len(st.session_state.users_data)
            st.metric("T·ªïng th√†nh vi√™n", total_users)
        
        # Bi·ªÉu ƒë·ªì th·ªÉ lo·∫°i s√°ch
        st.subheader("Ph√¢n b·ªë theo th·ªÉ lo·∫°i")
        category_count = {}
        for book in st.session_state.books_data.values():
            category = book['category']
            category_count[category] = category_count.get(category, 0) + book['copies_total']
        
        if category_count:
            df_category = pd.DataFrame(list(category_count.items()), columns=['Th·ªÉ lo·∫°i', 'S·ªë l∆∞·ª£ng'])
            st.bar_chart(df_category.set_index('Th·ªÉ lo·∫°i'))
        
        # S√°ch ph·ªï bi·∫øn
        st.subheader("S√°ch ƒë∆∞·ª£c m∆∞·ª£n nhi·ªÅu nh·∫•t")
        borrow_count = {}
        for record in st.session_state.borrowing_data:
            book_id = record['book_id']
            book_title = st.session_state.books_data[book_id]['title']
            borrow_count[book_title] = borrow_count.get(book_title, 0) + 1
        
        if borrow_count:
            sorted_books = sorted(borrow_count.items(), key=lambda x: x[1], reverse=True)[:5]
            df_popular = pd.DataFrame(sorted_books, columns=['T√™n s√°ch', 'L∆∞·ª£t m∆∞·ª£n'])
            st.dataframe(df_popular, use_container_width=True)

# Main execution
if not st.session_state.logged_in:
    login_form()
else:
    main_app()
